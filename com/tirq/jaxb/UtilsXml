package  com.tirq.jaxb;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.StringWriter;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Enumeration;
import java.util.List;

import javax.xml.XMLConstants;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.crypto.dsig.CanonicalizationMethod;
import javax.xml.crypto.dsig.DigestMethod;
import javax.xml.crypto.dsig.Reference;
import javax.xml.crypto.dsig.SignatureMethod;
import javax.xml.crypto.dsig.SignedInfo;
import javax.xml.crypto.dsig.Transform;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.keyinfo.X509Data;
import javax.xml.crypto.dsig.spec.C14NMethodParameterSpec;
import javax.xml.crypto.dsig.spec.TransformParameterSpec;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

public class UtilsXml {

	/**
	 * MÉTODO QUE VALIDA XML COM XSD E DISPARA UMA EXCEPTION COM AS POSSÍVEIS
	 * FALHAS DE VALIDAÇÃO . RECEBE COMO PARÂMETRO STRING DO XML A SER VALIDADO E
	 * STRING DO CAMINHO DO XSD USADO PARA VALIDAR(IMORTANTE: TODOS OS XSD
	 * DEVERÃO ESTAR NO MESMO DIRETÓRIO)
	 * 
	 * @param objetoValidar
	 * @param pathXsd
	 * @throws Exception
	 */
	public  void validarXsdString(String objetoValidar, String pathXsd) throws Exception {
		try {
			SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
			Schema schema = factory.newSchema(new StreamSource(pathXsd));
			Validator validator = schema.newValidator();
			InputStream inputStream = new ByteArrayInputStream(objetoValidar.getBytes());
			validator.validate(new StreamSource(inputStream));
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	}

	/**
	 * MÉTODO QUE VALIDA XML COM XSD E DISPARA UMA EXCEPTION COM AS POSSÍVEIS
	 * FALHAS DE VALIDAÇÃO. RECEBE COMO PARÂMETRO CAMINHO DO ARQUIVO DO XML A
	 * SER VALIDADO E STRING DO CAMINHO DO XSD USADO PARA VALIDAR(IMORTANTE:
	 * TODOS OS XSD DEVERÃO ESTAR NO MESMO DIRETÓRIO)
	 * 
	 * @param pathObjetoValidar
	 * @param pathXsd
	 * @throws Exception
	 */
	public  void validarXsdFile(String pathObjetoValidar, String pathXsd) throws Exception {
		try {
			SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
			Schema schema = factory.newSchema(new StreamSource(pathXsd));
			Validator validator = schema.newValidator();
			validator.validate(new StreamSource(pathObjetoValidar));
		} catch (Exception e) {
			e.getMessage();
			e.printStackTrace();
			throw e;
		}
	}

	/**
	 * MÉTODO QUE EXTRAI PARTE ESPECÍFICA DE UM XML.
	 * 
	 * @param xml
	 * @param nomeTagRoot
	 * @return
	 */
	public  String extrairParteEspecifica(String xml, String nomeTagRoot) {
		try {
			int indiceInicial = xml.lastIndexOf("<" + nomeTagRoot);
			int indiceFinal = xml.lastIndexOf("</" + nomeTagRoot + ">") + ("</" + nomeTagRoot + ">").length();
			xml = xml.substring(indiceInicial, indiceFinal);
			return xml;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * MÉTODO QUE ASSINA XML, IMPORTANTE SALIENTAR QUE DEVE SER ENVIADO O
	 * PARÂMETRO tagParaIncluirAssinaturaRoot SOMENTE QUANDO O PARÂMETRO
	 * tagAssinada NÃO FOR ROOT DO XML, CASO CONTRÁRIO O VALOR DO PARAMETRO
	 * tagParaIncluirAssinaturaRoot DEVE SER PREENCHIDO COM NULO
	 * 
	 * @param xml
	 * @param tagIncluirAssinaturaApenasQuandoForRoot
	 * @param tagSerAssinada
	 * @param senhaCertificadoTBL
	 * @param homeCertificado
	 * @return
	 * @throws Exception
	 */
	public String assinarXml(String xml, String tagParaIncluirAssinaturaRoot, String tagAssinada,
			String senhaCertificadoDigital, String pathCertificadoDigital) throws Exception {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		factory.setNamespaceAware(true);
		Document doc = factory.newDocumentBuilder().parse(new ByteArrayInputStream(xml.getBytes("UTF-8")));
		doc.getDocumentElement().removeAttribute("xmlns:ns0");
		doc.getDocumentElement().removeAttribute("xmlns:ns2");
		doc.getDocumentElement().removeAttribute("xmlns:ns3");
		XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");
		TransformParameterSpec tps = null;
		Transform envelopedTransform = fac.newTransform(Transform.ENVELOPED, tps);
		Transform c14NTransform = fac.newTransform("http://www.w3.org/TR/2001/REC-xml-c14n-20010315", tps);
		ArrayList<Transform> transformList = new ArrayList<Transform>(Arrays.asList(envelopedTransform, c14NTransform));
		char[] senha = senhaCertificadoDigital.toCharArray();
		KeyStore ks = KeyStore.getInstance("PKCS12");
		try {
			ks.load(new FileInputStream(pathCertificadoDigital), senha);
		} catch (Exception e) {
			e.printStackTrace();
		}
		Enumeration aliasesEnum = ks.aliases();
		String alias = "";
		while (aliasesEnum.hasMoreElements()) {
			alias = (String) aliasesEnum.nextElement();
			if (ks.isKeyEntry(alias)) {
				break;
			}
		}
		KeyStore.PrivateKeyEntry keyEntry = (KeyStore.PrivateKeyEntry) ks.getEntry(alias,
				new KeyStore.PasswordProtection(senha));
		PrivateKey privateKey = keyEntry.getPrivateKey();
		X509Certificate cert = (X509Certificate) keyEntry.getCertificate();
		KeyInfoFactory kif = fac.getKeyInfoFactory();
		List<X509Certificate> x509Content = new ArrayList<X509Certificate>();
		x509Content.add(cert);
		X509Data xd = kif.newX509Data(x509Content);
		KeyInfo ki = kif.newKeyInfo(Collections.singletonList(xd));
		NodeList elements = doc.getElementsByTagName(tagAssinada);
		Element el = (Element) elements.item(0);
		String id = el.getAttribute("Id");
		Reference ref = fac.newReference("#" + id, fac.newDigestMethod(DigestMethod.SHA1, null), transformList, null,
				null);
		SignedInfo si = fac.newSignedInfo(
				fac.newCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE, (C14NMethodParameterSpec) null),
				fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), Collections.singletonList(ref));
		XMLSignature signature = fac.newXMLSignature(si, ki);
		DOMSignContext dsc = null;
		if (tagParaIncluirAssinaturaRoot != null) {
			dsc = new DOMSignContext(privateKey, doc.getDocumentElement()
					.getElementsByTagName(tagParaIncluirAssinaturaRoot).item(0));
		} else {
			dsc = new DOMSignContext(privateKey, doc.getDocumentElement());
		}
		signature.sign(dsc);
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		TransformerFactory tf = TransformerFactory.newInstance();
		Transformer trans = tf.newTransformer();
		trans.setOutputProperty(OutputKeys.INDENT, "no");
		trans.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
		trans.setOutputProperty(OutputKeys.MEDIA_TYPE, "text/xml");
		trans.setOutputProperty(OutputKeys.METHOD, "xml");
		trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
		trans.transform(new DOMSource(doc), new StreamResult(os));
		return os.toString();
	}

	/*
	 * EXEMPLO DE USO
	 */
	public  void main(String[] args) {
		try {
			String xml = "<xmlRoot><tagAssinada></tagAssinada></xmlRoot>";
			String pathXsd = "pathXsd/anywhere";

			UtilsXml utilsXml = new UtilsXml();
			
			// EXEMPLO DE USO DE VALIDAÇÃO XSD
			utilsXml.validarXsdString(xml, pathXsd);
			System.out.println("XML VALIDADO COM XSD");

			// EXEMPLO DE USO DE ASSINAR FILHOS
			String xmlAssinado =utilsXml. assinarXml(xml, "xmlRoot", "tagAssinada", "senha123", "caminhodocertificado.pfx");
			
			// EXEMPLO DE USO DE ASSINAR ROOT
			String xmlAssinadoRoot = utilsXml.assinarXml(xml, null, "xmlRoot", "senha123", "caminhodocertificado.pfx");

		} catch (Exception e) {
			System.out.println("ERRO VALIDADO XML VALIDADO COM XSD");
			e.printStackTrace();
		}
	}

	/**
	 * RECEBE O XML E CONVERTE PARA O TIPO DE OBJETO CRIADO VIA JAXB VIA SCHEMA
	 * XSD/XML
	 * 
	 * @param xmlCriadorObjeto
	 * @return
	 */
	public  ObjetoSchemaXsdXmlJaxb gerarObject(String xmlCriadorObjeto) {
		try {
			JAXBContext context = JAXBContext.newInstance("caminho dos Object factories e classes afins");
			Unmarshaller unmarshaller = context.createUnmarshaller();
			ByteArrayInputStream bais = new ByteArrayInputStream(xmlCriadorObjeto.getBytes());
			JAXBElement<ObjetoSchemaXsdXmlJaxb> element = (JAXBElement<ObjetoSchemaXsdXmlJaxb>) unmarshaller.unmarshal(
					new StreamSource(bais), ObjetoSchemaXsdXmlJaxb.class);
			return element.getValue();
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * RECEBE O OBJETO CRIADO VIA JAXB VIA SCHEMA XSD/XML E CONVERTE PARA XML
	 * 
	 * @param o
	 * @return
	 */
	public String geraXml(ObjetoSchemaXsdXmlJaxb o) {
		try {
			JAXBContext context = JAXBContext.newInstance("caminho dos ObjectFactories e classes afins");
			Marshaller marshaller = context.createMarshaller();
			marshaller.setProperty(Marshaller.JAXB_FRAGMENT, Boolean.TRUE);
			JAXBElement<ObjetoSchemaXsdXmlJaxb> element = new ObjectFactory().createObjetoCriadorXml(o);
			StringWriter stringWriter = new StringWriter();
			marshaller.marshal(element, stringWriter);
			return stringWriter.toString();
		} catch (Exception e) {
			e.printStackTrace();
			return "";
		}
	}

	public InfAnyElement constroiModalRodoviario() {
		try {
			ObjetoEspecificoSchemaXsdXmlJaxb especifico = new ObjetoEspecificoSchemaXsdXmlJaxb();
			JAXBContext context = JAXBContext.newInstance(ObjetoEspecificoSchemaXsdXmlJaxb.class);
			Marshaller marshaller = context.createMarshaller();
			DocumentBuilder docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
			Document document = docBuilder.newDocument();
			marshaller.marshal(especifico, document);
			Element element = document.getDocumentElement();
			InfAnyElement infAnyElement = new InfAnyElement();
			infAnyElement.setAny(element);
			return infAnyElement;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * DEVEm SER SUBSTITUIDO A CLASSE QUE SERÁ CRIADA VIA JAXB VIA SCHEMA
	 * XSD/XML
	 */
	class ObjetoSchemaXsdXmlJaxb {
	}

	class ObjetoEspecificoSchemaXsdXmlJaxb {
	}

	class ObjectFactory {
		public JAXBElement<ObjetoSchemaXsdXmlJaxb> createObjetoCriadorXml(ObjetoSchemaXsdXmlJaxb o) {
			return new JAXBElement<ObjetoSchemaXsdXmlJaxb>(null, null, null, o);
		}
	}

	/**
	 * POPULAR ELEMENT CASO SEJA NECESSÁRIO
	 */
	class InfAnyElement {
		protected Element any;

		public Element getAny() {
			return any;
		}

		public void setAny(Element any) {
			this.any = any;
		}

	}

}
